// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/das/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_088aca846404cae9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// GenesisState defines the das module's genesis state.
type GenesisState struct {
	Params        Params        `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	NextRequestID uint64        `protobuf:"varint,2,opt,name=next_request_id,json=nextRequestId,proto3" json:"next_request_id,omitempty"`
	Requests      []DASRequest  `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests"`
	Responses     []DASResponse `protobuf:"bytes,4,rep,name=responses,proto3" json:"responses"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_088aca846404cae9, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

type DASRequest struct {
	ID              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamID        []byte `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	BatchHeaderHash []byte `protobuf:"bytes,3,opt,name=batch_header_hash,json=batchHeaderHash,proto3" json:"batch_header_hash,omitempty"`
	NumBlobs        uint32 `protobuf:"varint,4,opt,name=num_blobs,json=numBlobs,proto3" json:"num_blobs,omitempty"`
}

func (m *DASRequest) Reset()         { *m = DASRequest{} }
func (m *DASRequest) String() string { return proto.CompactTextString(m) }
func (*DASRequest) ProtoMessage()    {}
func (*DASRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_088aca846404cae9, []int{2}
}
func (m *DASRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DASRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DASRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DASRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DASRequest.Merge(m, src)
}
func (m *DASRequest) XXX_Size() int {
	return m.Size()
}
func (m *DASRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DASRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DASRequest proto.InternalMessageInfo

func (m *DASRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DASRequest) GetStreamID() []byte {
	if m != nil {
		return m.StreamID
	}
	return nil
}

func (m *DASRequest) GetBatchHeaderHash() []byte {
	if m != nil {
		return m.BatchHeaderHash
	}
	return nil
}

func (m *DASRequest) GetNumBlobs() uint32 {
	if m != nil {
		return m.NumBlobs
	}
	return 0
}

type DASResponse struct {
	ID      uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sampler github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,2,opt,name=sampler,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"sampler,omitempty"`
	Results []bool                                        `protobuf:"varint,3,rep,packed,name=results,proto3" json:"results,omitempty"`
}

func (m *DASResponse) Reset()         { *m = DASResponse{} }
func (m *DASResponse) String() string { return proto.CompactTextString(m) }
func (*DASResponse) ProtoMessage()    {}
func (*DASResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_088aca846404cae9, []int{3}
}
func (m *DASResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DASResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DASResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DASResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DASResponse.Merge(m, src)
}
func (m *DASResponse) XXX_Size() int {
	return m.Size()
}
func (m *DASResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DASResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DASResponse proto.InternalMessageInfo

func (m *DASResponse) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DASResponse) GetSampler() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.Sampler
	}
	return nil
}

func (m *DASResponse) GetResults() []bool {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "evmos.das.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "evmos.das.v1.GenesisState")
	proto.RegisterType((*DASRequest)(nil), "evmos.das.v1.DASRequest")
	proto.RegisterType((*DASResponse)(nil), "evmos.das.v1.DASResponse")
}

func init() { proto.RegisterFile("evmos/das/v1/genesis.proto", fileDescriptor_088aca846404cae9) }

var fileDescriptor_088aca846404cae9 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x6f, 0xba, 0xa5, 0x9b, 0x4e, 0x5b, 0x96, 0x8d, 0x8b, 0xa4, 0x15, 0x92, 0xd2, 0x53, 0x57,
	0x68, 0x42, 0x2b, 0x08, 0x2e, 0x78, 0xd8, 0x58, 0xb0, 0xbd, 0x88, 0xa4, 0xe0, 0xc1, 0x4b, 0x98,
	0x34, 0x63, 0x12, 0x6c, 0x32, 0x31, 0x6f, 0x52, 0xda, 0x6f, 0xe0, 0xd1, 0xa3, 0x47, 0xc1, 0xaf,
	0xe0, 0x87, 0xd8, 0xe3, 0xe2, 0xc9, 0x53, 0x91, 0xf4, 0x5b, 0x78, 0x10, 0xe9, 0xcc, 0xd4, 0xad,
	0xa2, 0x97, 0x24, 0xef, 0xf7, 0x27, 0xef, 0xf7, 0x98, 0x37, 0xa8, 0x4b, 0x56, 0x09, 0x05, 0x3b,
	0xc0, 0x60, 0xaf, 0x46, 0x76, 0x48, 0x52, 0x02, 0x31, 0x58, 0x59, 0x4e, 0x19, 0xd5, 0x5a, 0x9c,
	0xb3, 0x02, 0x0c, 0xd6, 0x6a, 0xd4, 0xed, 0x2c, 0x28, 0x24, 0x14, 0x3c, 0xce, 0xd9, 0xa2, 0x10,
	0xc2, 0xee, 0x45, 0x48, 0x43, 0x2a, 0xf0, 0xfd, 0x97, 0x44, 0x3b, 0x21, 0xa5, 0xe1, 0x92, 0xd8,
	0xbc, 0xf2, 0x8b, 0x37, 0x36, 0x4e, 0x37, 0x92, 0x32, 0xff, 0xa6, 0x58, 0x9c, 0x10, 0x60, 0x38,
	0xc9, 0x84, 0xa0, 0xaf, 0xa2, 0xfa, 0x4b, 0x9c, 0xe3, 0x04, 0xfa, 0x3f, 0x15, 0xd4, 0x7a, 0x2e,
	0x62, 0xcd, 0x19, 0x66, 0x44, 0x1b, 0xa3, 0x7a, 0xc6, 0x29, 0x5d, 0xe9, 0x29, 0x83, 0xe6, 0xf8,
	0xc2, 0x3a, 0x8e, 0x69, 0x09, 0x9b, 0x53, 0xbb, 0xd9, 0x9a, 0x15, 0x57, 0x2a, 0xb5, 0x27, 0xe8,
	0x2c, 0x25, 0x6b, 0xe6, 0xe5, 0xe4, 0x5d, 0x41, 0x80, 0x79, 0x71, 0xa0, 0x57, 0x7b, 0xca, 0xa0,
	0xe6, 0x9c, 0x97, 0x5b, 0xb3, 0xfd, 0x82, 0xac, 0x99, 0x2b, 0x98, 0xd9, 0xc4, 0x6d, 0xa7, 0x47,
	0x65, 0xa0, 0x5d, 0x21, 0x55, 0xba, 0x40, 0x3f, 0xe9, 0x9d, 0x0c, 0x9a, 0x63, 0xfd, 0xcf, 0x86,
	0x93, 0xeb, 0xb9, 0x54, 0xcb, 0xa6, 0xbf, 0xf5, 0xda, 0x53, 0xd4, 0xc8, 0x09, 0x64, 0x34, 0x05,
	0x02, 0x7a, 0x8d, 0x9b, 0x3b, 0xff, 0x30, 0x0b, 0x85, 0x74, 0xdf, 0x39, 0xae, 0x6a, 0xef, 0x3f,
	0x99, 0x95, 0xfe, 0x47, 0x05, 0xa1, 0xbb, 0x1e, 0xda, 0x7d, 0x54, 0x8d, 0x03, 0x3e, 0x7a, 0xcd,
	0xa9, 0x97, 0x5b, 0xb3, 0x3a, 0x9b, 0xb8, 0xd5, 0x38, 0xd0, 0x2e, 0x51, 0x03, 0x58, 0x4e, 0x70,
	0x72, 0x18, 0xae, 0xe5, 0xb4, 0xca, 0xad, 0xa9, 0xce, 0x39, 0x38, 0x9b, 0xb8, 0xaa, 0xa0, 0x67,
	0x81, 0xf6, 0x10, 0x9d, 0xfb, 0x98, 0x2d, 0x22, 0x2f, 0x22, 0x38, 0x20, 0xb9, 0x17, 0x61, 0x88,
	0xf4, 0x93, 0xbd, 0xc5, 0x3d, 0xe3, 0xc4, 0x94, 0xe3, 0x53, 0x0c, 0x91, 0xf6, 0x00, 0x35, 0xd2,
	0x22, 0xf1, 0xfc, 0x25, 0xf5, 0xf7, 0x23, 0x28, 0x83, 0xb6, 0xab, 0xa6, 0x45, 0xe2, 0xec, 0xeb,
	0xfe, 0x67, 0x05, 0x35, 0x8f, 0x26, 0xf8, 0x6f, 0x36, 0x1f, 0x9d, 0x02, 0x4e, 0xb2, 0x25, 0xc9,
	0x65, 0xb2, 0xe9, 0x8f, 0xad, 0x39, 0x0c, 0x63, 0x16, 0x15, 0xbe, 0xb5, 0xa0, 0x89, 0xdc, 0x26,
	0xf9, 0x1a, 0x42, 0xf0, 0xd6, 0x66, 0x9b, 0x8c, 0x80, 0xf5, 0x0a, 0x2f, 0xaf, 0x83, 0x20, 0x27,
	0x00, 0x5f, 0xbf, 0x0c, 0xef, 0xc9, 0x9d, 0x93, 0x88, 0xb3, 0x61, 0x04, 0xdc, 0xc3, 0x8f, 0x35,
	0x1d, 0x9d, 0xe6, 0x04, 0x8a, 0xa5, 0x3c, 0x26, 0xd5, 0x3d, 0x94, 0xce, 0xb3, 0x9b, 0xd2, 0x50,
	0x6e, 0x4b, 0x43, 0xf9, 0x5e, 0x1a, 0xca, 0x87, 0x9d, 0x51, 0xb9, 0xdd, 0x19, 0x95, 0x6f, 0x3b,
	0xa3, 0xf2, 0xfa, 0xf2, 0x28, 0x82, 0xb8, 0x07, 0xe2, 0xb9, 0x1a, 0x3d, 0xb6, 0xd7, 0x87, 0x3b,
	0xc1, 0x93, 0xf8, 0x75, 0xbe, 0x97, 0x8f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xc5, 0x40,
	0x62, 0x30, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextRequestID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextRequestID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DASRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DASRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DASRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumBlobs != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NumBlobs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BatchHeaderHash) > 0 {
		i -= len(m.BatchHeaderHash)
		copy(dAtA[i:], m.BatchHeaderHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BatchHeaderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StreamID) > 0 {
		i -= len(m.StreamID)
		copy(dAtA[i:], m.StreamID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StreamID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DASResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DASResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DASResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Results[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Results)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sampler) > 0 {
		i -= len(m.Sampler)
		copy(dAtA[i:], m.Sampler)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Sampler)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.NextRequestID != 0 {
		n += 1 + sovGenesis(uint64(m.NextRequestID))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DASRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenesis(uint64(m.ID))
	}
	l = len(m.StreamID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.BatchHeaderHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.NumBlobs != 0 {
		n += 1 + sovGenesis(uint64(m.NumBlobs))
	}
	return n
}

func (m *DASResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenesis(uint64(m.ID))
	}
	l = len(m.Sampler)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Results) > 0 {
		n += 1 + sovGenesis(uint64(len(m.Results))) + len(m.Results)*1
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRequestID", wireType)
			}
			m.NextRequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, DASRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, DASResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DASRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DASRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DASRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamID = append(m.StreamID[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamID == nil {
				m.StreamID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchHeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchHeaderHash = append(m.BatchHeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchHeaderHash == nil {
				m.BatchHeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlobs", wireType)
			}
			m.NumBlobs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlobs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DASResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DASResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DASResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sampler", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sampler = append(m.Sampler[:0], dAtA[iNdEx:postIndex]...)
			if m.Sampler == nil {
				m.Sampler = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Results = append(m.Results, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Results) == 0 {
					m.Results = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Results = append(m.Results, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
